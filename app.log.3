2024-05-27 21:07:21,343 - app - INFO - Response from model: Based on the provided information and code, here are a few suggestions to resolve the issue:

1. Check the Flask app's host and port settings:
   - In your `app.py` file, you have specified the host as `'0.0.0.0'` and the port as `8080`. Make sure these settings match the configuration in your Digital Ocean app.
   - If the port is set to `8080` in your Digital Ocean app, ensure that the `PORT` environment variable is set to `8080` or remove the `PORT` environment variable altogether.

2. Update the `Procfile`:
   - Your current `Procfile` contains the following line:
     ```
     web: flask run --host=0.0.0.0 --port=${PORT:-8080}
     ```
   - Modify it to use `gunicorn` instead of `flask run`:
     ```
     web: gunicorn app:app --bind 0.0.0.0:$PORT
     ```
   - Make sure you have `gunicorn` installed by adding it to your `requirements.txt` file.

3. Check the application's entry point:
   - In your Digital Ocean app settings, the "Run Command" is set to `python app.py`. However, based on your code, the Flask app is created in the `app.py` file itself.
   - Update the "Run Command" to `gunicorn app:app --bind 0.0.0.0:$PORT` to match the `Procfile` changes.

4. Review the application's file structure:
   - Ensure that your `app.py` file is located in the root directory of your project.
   - Make sure that the `templates` directory (containing HTML files) and the `static` directory (containing CSS, JavaScript, and other static files) are also located in the root directory.

5. Check the application's dependencies:
   - Review your `requirements.txt` file and ensure that all the necessary dependencies are listed.
   - Include `gunicorn` in the `requirements.txt` file if it's not already present.

6. Verify the database connection:
   - Make sure your `DATABASE_URL` environment variable is correctly set in your Digital Ocean app's settings.
   - Double-check that your application can connect to the database using the provided URL.

7. Monitor the application logs:
   - Keep an eye on the "Runtime Logs" in your Digital Ocean app to identify any error messages or stack traces.
   - Look for any specific error messages related to the database connection, missing dependencies, or other issues.

After making the necessary changes, redeploy your application and test it again. If the issue persists, further investigation may be required based on the specific error messages or logs generated by your application.

Remember to test your changes locally before deploying to the production environment to ensure that the application runs as expected.
2024-05-27 21:07:21,524 - app - INFO - Prompt tokens: 9849
2024-05-27 21:07:21,524 - app - INFO - Completion tokens: 600
2024-05-27 21:07:21,524 - app - INFO - Total tokens: 10449
2024-05-27 21:07:21,524 - app - INFO - Conversation history truncated for summary generation
2024-05-27 21:07:22,210 - app - INFO - Response from OpenAI for summary: {
  "choices": [
    {
      "finish_reason": "stop",
      "index": 0,
      "logprobs": null,
      "message": {
        "content": "AI UI Development",
        "role": "assistant"
      }
    }
  ],
  "created": 1716869236,
  "id": "chatcmpl-9TiPEUr4i9VSmioyjnSSSKWmSnWsD",
  "model": "gpt-3.5-turbo-0125",
  "object": "chat.completion",
  "system_fingerprint": null,
  "usage": {
    "completion_tokens": 3,
    "prompt_tokens": 757,
    "total_tokens": 760
  }
}
2024-05-27 21:07:22,221 - app - INFO - Generated conversation summary: AI UI Development
